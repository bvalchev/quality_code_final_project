<?php

/**
 * Created by PhpStorm.
 * User: Boyan
 * Date: 15.2.2020 Ð³.
 * Time: 16:31
 */

/**
 * Include the interface from the interface folder
 */
require_once APPPATH.'interfaces/Blog_Controller_Interface.php';


/**
 * Class Blog_Controller
 * The following class inherits Basic_Controller class and is responsible for the handling of blog operations
 * @Author Boyan Valchev
 */
class Blog_Controller extends Basic_Controller implements Blog_Controller_Interface
{

    private $keysForLikeOperatorInGetRequest = array('name', 'email');
    private $keysForFileUpload = array('blog_main_pic');

    private $blogTable = 'blog';
    private $uploadPath;
    private $allowedFileTypes = 'gif|jpg|png|jpeg';
    private $pictureLocationName = 'https://aratour.bg/uploads/blogPics/';
    public function __construct()
    {
        parent::__construct();
        $this->load->model('Blog_Model');
        $this->uploadPath = realpath(APPPATH . '../uploads/blogPics/');
    }
   

    /**
     * The following function is used to call the right method,
     * depending on the method used.
     * Example url: www.websitename.com/posts
     * Depending on the method used the function will resolve to:
     * Method GET: Resolves to private function getBlogPosts()
     *      The stated function is responsible for getting blog posts
     *      Consideres the following URL parameters
     *          offset - The value of the offer offset
     *          limit - The value of the offer count limit
     *          sortField - The value of the field to sort on
     *          sortOrder - Expects ASC or DESC depending on the way the items to be sorted
     *      Returnes an array of all desired blog posts
     *      IMPORTANT - For security concerns all of the tags will be escaped!
     * Method POST: Resolves to private function insertBlogPost()
     *      The stated function inserts blog posts
     *      The function takes the parameters from the post body.
     *      The parameters should be provided as valid JSON.
     *      Should there be html tags in the parameter, they should be escaped
     *      The following parameters are considered:
     *          blog_post_name - {string} - The name of the post
     *          blog_main_pic - {string} - The name of the main pic.
     *          blog_post_heading - {string} - The heading of the post (not sure if we will need it)
     *          blog_post_body - {string} - The blog body generated by TinyMCE
     *          blog_post_tags - {string} - Tags for the post
     *          created_by - {string} - The username of the user who created the post - Can be taken from session info
     *          creation_date - {date} - The date of creation
     * Method PUT: Resolves to private function updateBlogPost()
     *      The following function updates blog posts
     *      The takes the parameters from the post body.
     *      The parameters should be provided as valid JSON.
     *      Should there be html tags in the parameter, they should be escaped
     *      The following parameters are considered:
     *          blog_id - {id_number} - The id of the blog post.
     *          blog_post_name - {string} - The name of the post.
     *          blog_main_pic - {string} - The name of the main pic.
     *          blog_post_heading - {string} - The heading of the post (not sure if we will need it)
     *          blog_post_body - {string} - The blog body generated by TinyMCE
     *          blog_post_tags - {string} - Tags for the post
     *          created_by - {string} - The username of the user who created the post - Can be taken from session info
     *          creation_date - {date} - The date of creation
     * Method DELETE: Resolves to private function deleteBlogPost()
     *      The following function deletes a blog post
     *      The function expects DELETE method to be used for the request
     *      The function consideres the following parameters from the request body
     *          blog_id {id_number} - The id for the blog post to delete  
     */
    public function index(){
        if($this->input->method() == 'get'){
            $this->getBlogPosts();
        }else if($this->input->method() == 'post'){
            $this->handlePostMethod();
        }else if($this->input->method() == 'delete'){
            $this->deleteBlogPost();
        }
    }

    /**
     * The following function uploads a picture to the server
     * It also lists the picture for an optimization
     * This function is written mainly for TinyMCE
     * Example url: www.websitename.com/picture/upload
     */
    public function uploadActionForThirdParty(){
        // if(!parent::isDesiredMethodUsed('post')){
        //     return;
        // };
        echo parent::upload_action($this->uploadPath, $this->allowedFileTypes, 'userfile', true);
    }

    /**
     * The following function executes image size optimization for all of the pictures
     * listed in the pictures_optimization table
     * The function is used from a cron job, which is executes once every day
     * Example url: www.websitename.com/picture/optimize    
     */
    public function executeScheduledPicUpdate(){
        $picturesToUpdateArray = $this->Blog_Model->getPicturesToUpdate();
        $folderName = $this->uploadPath;
        foreach($picturesToUpdateArray as $singlePicture)
        {
            $this->optimize_action($folderName, $singlePicture);
        }
    }
    
    /**
     * The following function is responsible for getting blog posts
     * Example url: www.websitename.com/posts with method GET 
     * Consideres as URL parameters
     *      offset - The value of the offer offset
     *      limit - The value of the offer count limit
     *      sortField - The value of the field to sort on
     *      sortOrder - Expects ASC or DESC depending on the way the items to be sorted
     * @return array of all desired blog posts
     * IMPORTANT - For security concerns all of the tags will be escaped!
     */
    private function getBlogPosts(){
        echo parent::basicGetOperation(array($this->Blog_Model, 'getOperation'), $this->keysForLikeOperatorInGetRequest, $this->blogTable, function(){}, false);
        return;
    }

    /**
     * The following function inserts blog posts
     * REQUIRES POST METHOD!
     * Example url: www.websitename.com/posts with method POST
     * The takes the parameters from the post body.
     * The following parameters are considered:
     *      blog_post_name - {string} - The name of the post
     *      blog_main_pic - {string} - The name of the main pic.
     *      blog_post_heading - {string} - The heading of the post (not sure if we will need it)
     *      blog_post_body - {string} - The blog body generated by TinyMCE
     *      blog_post_tags - {string} - Tags for the post
     *      created_by - {string} - The username of the user who created the post - Can be taken from session info
     *      creation_date - {date} - The date of creation
     */

    public function uploadPicture(){
        if(!empty($_FILES['file']['name'])) {
            $pictureName = parent::upload_action($this->uploadPath, 'gif|jpg|png|jpeg', 'file');
            if($pictureName){
                echo $this->uploadPath.$pictureName;
                return;
            }else{
                $this->echoJsonResponse("File upload failed", $this->unsuccessfulRequestErrorCode);
                return;
            }
        }
    }

    private function handlePostMethod(){
	if(!isset($_SESSION['id']) && $this->useSession){
            $this->echoJsonResponse("Session not set", $this->unsuccessfulRequestErrorCode);
            return;
        }
        $dataObject = file_get_contents('php://input');
        $postData = parent::sanitizeInput($_POST, true);
        $postData['creation_date'] = date('Y/m/d h:i:s a', time());
        if($this->useSession){
            $postData['created_by'] =  $_SESSION['id'];
        }

        if(!parent::checkAllKeysExist($postData, $this->blogTable)){
            return;
        }

        //upload files if needed
        foreach ($this->keysForFileUpload as $value) {
            if(!empty($_FILES['file']['name'])) {
                $pictureName = parent::upload_action($this->uploadPath, 'gif|jpg|png|jpeg', 'file');
                if($pictureName){
                    $postData[$value] = $this->pictureLocationName.$pictureName;
                }else{
                    $this->echoJsonResponse("File upload failed", $this->unsuccessfulRequestErrorCode);
                    return;
                }
            }
        }

        if(isset($postData['blog_id'])){
           $this->updateBlogPost($postData);
        }else{
            $this->insertBlogPost($postData);
        }
    }

    private function insertBlogPost($insertTupleData){
        parent::executeInsertOperation($this->Blog_Model, 'insertBlogPost', $insertTupleData);
    }

    /**
     * The following function updates blog posts
     * Example url: www.websitename.com/posts with method PUT
     * REQUIRES PUT METHOD!
     * The takes the parameters from the post body.
     * The following parameters are considered:
     *      blog_id - {id_number} - The id of the blog post.
     *      blog_post_name - {string} - The name of the post.
     *      blog_main_pic - {string} - The name of the main pic.
     *      blog_post_heading - {string} - The heading of the post (not sure if we will need it)
     *      blog_post_body - {string} - The blog body generated by TinyMCE
     *      blog_post_tags - {string} - Tags for the post
     *      created_by - {string} - The username of the user who created the post - Can be taken from session info
     *      creation_date - {date} - The date of creation
     */
    private function updateBlogPost($updateTupleData){
        parent::executeUpdateOperation($this->Blog_Model, 'updateBlogPost', $updateTupleData["blog_id"], $updateTupleData);
    }

    /**
     * The following function deletes a blog post
     * The function expects DELETE method to be used for the request
     * Example url: www.websitename.com/posts with method DELETE
     * The function consideres the following parameters from the request body
     *      blog_id {id_number} - The id for the blog post to delete
     */
    private function deleteBlogPost(){
	if(!isset($_SESSION['id']) && $this->useSession){
            $this->echoJsonResponse("Session not set", $this->unsuccessfulRequestErrorCode);
            return;
        }
        $jsonObject = file_get_contents('php://input', true);
        if($this->isJson($jsonObject)) {
            $decodedObject = json_decode($jsonObject, true);
        }else{
            $this->echoJsonResponse("JSON object expected", $this->badRequestErrorCode);
            return;
        }

        //Check if id is provided
        if(!parent::checkIfPropertyIsSet($decodedObject , 'blog_id')){
            return;
        }

        if(!$this->Blog_Model->deleteBlogPostById($decodedObject["blog_id"])){
            $this->echoJsonResponse("Delete operation failed", $this->unsuccessfulRequestErrorCode);
            return;
        }else{
            $this->echoJsonResponse("Delete operation successful", $this->successfulRequestCode);
            return;
        }
    }

    public function getStaticBlogView(){
       	$query = $this->db->select('blog_post_heading, blog_main_pic')
			  ->where('blog_id', $_GET['blog_id'])
	                  ->get($this->blogTable);
	$dataArray = $query->result_array()[0];
	$dataArray['title'] = $dataArray['blog_post_heading'];
	$dataArray['main_image'] = $dataArray['blog_main_pic'];
        $this->load->view('staticView', $dataArray);
    }
}