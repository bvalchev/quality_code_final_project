<?php

/**
 * Created by PhpStorm.
 * User: Boyan
 * Date: 18.3.2020 г.
 * Time: 16:31
 */

 /**
 * Interface Blog_Controller_Interface
 * The Interface is implemented by the Blog_Controller class
 * The class is reachable with: www.websitename.com/posts
 */
interface Blog_Controller_Interface{
    /**
     * Blog_Controller constructor.
     */
    public function __construct();

   /**
     * The following function is used to call the right method,
     * depending on the method used.
     * Example url: www.websitename.com/posts
     * Depending on the method used the function will resolve to:
     * Method GET: Resolves to private function getBlogPosts()
     *      The stated function is responsible for getting blog posts
     *      Consideres the following URL parameters
     *          offset - The value of the offer offset
     *          limit - The value of the offer count limit
     *          sortField - The value of the field to sort on
     *          sortOrder - Expects ASC or DESC depending on the way the items to be sorted
     *      Returnes an array of all desired blog posts
     *      IMPORTANT - For security concerns all of the tags will be escaped!
     * Method POST: Resolves to private function insertBlogPost()
     *      The stated function inserts blog posts
     *      The function takes the parameters from the post body.
     *      The parameters should be provided as valid JSON.
     *      Should there be html tags in the parameter, they should be escaped
     *      The following parameters are considered:
     *          blog_post_name - {string} - The name of the post
     *          blog_main_pic - {string} - The name of the main pic.
     *          blog_post_heading - {string} - The heading of the post (not sure if we will need it)
     *          blog_post_body - {string} - The blog body generated by TinyMCE
     *          blog_post_tags - {string} - Tags for the post
     *          created_by - {string} - The username of the user who created the post - Can be taken from session info
     *          creation_date - {date} - The date of creation
     * Method PUT: Resolves to private function updateBlogPost()
     *      The following function updates blog posts
     *      The takes the parameters from the post body.
     *      The parameters should be provided as valid JSON.
     *      Should there be html tags in the parameter, they should be escaped
     *      The following parameters are considered:
     *          blog_id - {id_number} - The id of the blog post.
     *          blog_post_name - {string} - The name of the post.
     *          blog_main_pic - {string} - The name of the main pic.
     *          blog_post_heading - {string} - The heading of the post (not sure if we will need it)
     *          blog_post_body - {string} - The blog body generated by TinyMCE
     *          blog_post_tags - {string} - Tags for the post
     *          created_by - {string} - The username of the user who created the post - Can be taken from session info
     *          creation_date - {date} - The date of creation
     * Method DELETE: Resolves to private function deleteBlogPost()
     *      The following function deletes a blog post
     *      The function expects DELETE method to be used for the request
     *      The function consideres the following parameters from the request body
     *          blog_id {id_number} - The id for the blog post to delete  
     */
    public function index();


    /**
     * The following function uploads a picture to the server
     * It also lists the picture for an optimization
     * Example url: www.websitename.com/picture/upload
     */
    public function uploadActionForThirdParty();


    /**
     * The following function executes image size optimization for all of the pictures
     * listed in the pictures_optimization table
     * The function is used from a cron job, which is executes once every day
     * Example url: www.websitename.com/picture/optimize    
     */
    public function executeScheduledPicUpdate();
}
